{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11760\viewh14260\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Board:\
	
\f1\i ### Draw the Othello board ###
\f0\i0 \
	\
	WIDTH = 400\
	HEIGHT = 400\
	NUM = 4\
	Strokeweight = 4\
	\
	display():\
	
\f1\i ### Draw the board by processing ###
\f0\i0 \
	pass\
\
class Tile:\
	
\f1\i ### Draw one single tile ###\

\f0\i0 \
	Board_size = WIDTH\
	Board_num = NUM\
	color = 0 or 255 (0 for black, 255 for white)\
	\
	display():\
	\'93\'94\'94 Draw the tile\'94\'94\'94\
	pass\
\
class Tiles:\
	
\f1\i ### Create a list of list to store all valid tiles and display all valid tiles ###\

\f0\i0 \
	list = [[None for x in range(self.Board_num)]\
		 for y in range(self.Board_num)]\
	\
	display():\
	
\f1\i ### Check if valid and display all existing and valid tiles ###
\f0\i0 \
	pass\
	\
class Gamecontroller:\
	
\f1\i ### Control the move of users and judge who wins ###
\f0\i0 \
\
	def black_move():\
	
\f1\i ### Black\'92s turn ###
\f0\i0 \
	pass\
\
	def white_move():\
	### White\'92s turn ###\
	pass\
\
	def update():\
	
\f1\i ### judge who wins ###
\f0\i0 \
	pass\
\
Flow of control:\
	1. Set up the game environment \'97> 2. decide if one move is valid (legal) \'97> 3.make move if legal and 	decide next turn\'97> 4.Execute the loop until the board filled \'97> 5. decide who wins\
\
\
}